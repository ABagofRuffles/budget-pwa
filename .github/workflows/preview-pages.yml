name: PR Preview (GitHub Pages)

on:
  # Trigger when a pull request targets your main branch.
  # 'pull_request_target' runs in the base (main) context,
  # which is required since your github-pages environment
  # only allows deployments from main.
  pull_request_target:
    types: [opened, synchronize, reopened, ready_for_review]

permissions:
  contents: read           # Allows reading repo files
  pages: write             # Needed to publish to GitHub Pages
  id-token: write          # Used for secure OIDC authentication
  pull-requests: write     # Allows posting a comment with the preview link

concurrency:
  # Ensures only one preview deploy per PR at a time.
  # Cancels older runs if you push new commits.
  group: pages-${{ github.event.pull_request.number }}
  cancel-in-progress: true

jobs:
  build:
    # Only run if the PR is from the same repo (not from a fork)
    # This avoids permission issues for outside contributors.
    if: ${{ github.event.pull_request.head.repo.full_name == github.repository }}
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout the PR code that we want to preview.
      #    The 'ref' ensures we build the actual commit.
      - name: Checkout PR HEAD
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      # 2. Set up Node.js (explicit version for stability)
      #    We use version 20 to avoid 'lts/*' resolution issues.
      - name: Setup Node 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'                     # Cache dependencies for faster builds
          cache-dependency-path: package-lock.json

      # 3. Install dependencies and build your project.
      #    If there's a package-lock.json, use npm ci for reproducible builds.
      - name: Install & build
        env:
          CI: true                         # Ensures production mode
        run: |
          if [ -f package-lock.json ]; then
            npm ci                         # Clean install using lockfile
          else
            npm install --no-audit --no-fund
          fi
          npm run build                    # Your build script (edit if different)

      # 4. Upload the built static site as an artifact.
      #    GitHub Pages will later deploy this artifact.
      #    Change './dist' if your build output folder differs.
      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./dist                     # e.g., './build' for React CRA

  deploy:
    # Wait for the build job to finish
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages                  # Match your environment name

    steps:
      # 5. Configure GitHub Pages to prepare deployment.
      - name: Configure Pages
        uses: actions/configure-pages@v5

      # 6. Deploy the uploaded artifact as a preview site.
      #    Setting 'preview: true' makes it temporary per PR.
      - name: Deploy Preview
        id: deploy
        uses: actions/deploy-pages@v4
        with:
          preview: true

      # 7. Add a comment to the PR with the preview URL.
      #    Makes it easy to click and view the live preview.
      - name: Comment preview link
        uses: actions/github-script@v7
        with:
          script: |
            const url = '${{ steps.deploy.outputs.preview_url }}'
            if (url) {
              github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: `ðŸš€ Preview available: ${url}`
              })
            }