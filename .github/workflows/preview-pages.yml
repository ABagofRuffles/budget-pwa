name: PR Preview (GitHub Pages)

on:
  # Run from the base branch context so it satisfies the
  # github-pages environment restriction to "main".
  pull_request_target:
    types: [opened, synchronize, reopened, ready_for_review]

permissions:
  contents: read
  pages: write
  id-token: write
  pull-requests: write

concurrency:
  # One preview per PR; cancel older runs when new commits arrive.
  group: pages-${{ github.event.pull_request.number }}
  cancel-in-progress: true

jobs:
  build:
    # Only run for PRs from this repo (skip forks).
    if: ${{ github.event.pull_request.head.repo.full_name == github.repository }}
    runs-on: ubuntu-latest
    steps:
      # 1) Check out the PR's code at the exact commit.
      - name: Checkout PR HEAD
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      # 2) Upload the static site files as the Pages artifact.
      #    Your index.html is at the repo root, so publish ".".
      #    (If you later move to a 'dist' or 'build' folder, change this path.)
      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
    steps:
      # 3) Configure Pages.
      - name: Configure Pages
        uses: actions/configure-pages@v5

      # 4) Deploy a PR preview (temporary link) and expose its URL.
      - name: Deploy Preview
        id: deploy
        uses: actions/deploy-pages@v4
        with:
          preview: true

      # 5) Post or update a friendly comment with the preview URL.
      - name: Comment preview link
        uses: actions/github-script@v7
        with:
          script: |
            const url = '${{ steps.deploy.outputs.preview_url }}'
            if (!url) return

            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })

            const body = `**âœ¨ Live Preview Ready!**\n\nðŸ”— [View Preview Site](${url})`
            const existing = comments.find(c => c.body && c.body.includes('âœ¨ Live Preview Ready!'))

            if (existing) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existing.id,
                body,
              })
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body,
              })
            }